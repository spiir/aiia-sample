@model TransactionsViewModel

@{
    ViewBag.Title = "Transactions";
    Layout = "_Layout";
}

<div class="container-fluid">
    <h1 class="text-center">
        Transactions
    </h1>
   
    <section class="jumbotron text-center">
        <div class="row justify-content-md-center">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="include-deleted" checked="@Model.IncludeDeleted" onclick="toggleIncludeDeleted()">
                <label class="form-check-label" for="include-deleted">
                    Include soft-deleted transactions
                </label>
            </div>
        </div>
        <br/>
        <div class="container">
            <div id="filter-container">
                <div class="row justify-content-md-center">
                    <button class="col btn btn-outline-info mr-1" onclick="addFilter()">Add filter</button>
                    <button class="col btn btn-outline-info mr-1" onclick="addNumberBetweenFilter('amount')">Add transaction amount filter</button>
                    <button class="col btn btn-outline-info mr-1" onclick="addNumberBetweenFilter('balance')">Add account balance filter</button>
                </div>
                <div id="filter-button-container" class="row justify-content-md-center mt-1">
                    <button class="col btn btn-outline-info mr-1" id="apply-filters-btn" onclick="applyFilters()" disabled>Apply filters</button>
                    <button class="col btn btn-outline-danger ml-1" onclick="clearFilters()">Clear filters</button>
                </div>
            </div>
        </div>
    </section>

    @if (Model.Transactions != null && Model.Transactions.Count > 0)
    {
        <div id="transaction-container" class="col"></div>
        <div class="container" style="width: 100%;">
            <button id="load-more-btn"
                    class="btn btn-outline-info btn-lg"
                    style="margin:0 auto; display:block;"
                    onclick="loadMore()">
                Load More
            </button>
        </div>
    }
    else
    {
        <div id="transaction-container" class="col">
            <h3 class="text-center">No transactions found. <a href="https://docs.getviia.com/#/accounts/sync">Data synchronization</a> might still be in progress</h3>
        </div>
    }

    <input type="hidden" id="pagingTokenInput" value="@Model.PagingToken">
    <input type="hidden" id="includeDeletedInput" value="@(Model.IncludeDeleted ? 1 : 0)">
</div>

@section Scripts
{
    <script>
        $(document).ready(function() {
            renderTransactions(@Html.Raw(Json.Serialize(@Model.Transactions)));
        });
        
        function renderTransactions(transactions) {
            transactions.forEach(renderSingleTransaction);
        }
        
        function renderSingleTransaction(transaction) {
            let amountSpan = $('<span></span>').text(transaction.transactionAmount.value);
            if(transaction.transactionAmount.value >= 0) {
                amountSpan.addClass('text-success');
            } else {
                amountSpan.addClass('text-danger');
            }
            let amountContainer = $(`<div class="p-2"></div>`).append(amountSpan).append(` ${transaction.transactionAmount.currency}`);
            let balanceContainer = $(`<div class="p-2"></div>`).text(`${transaction.balance.value} ${transaction.balance.currency}`);
            let amountAndBalanceContainer = $(`<div class="flex-column" style="margin-right: 1rem;"></div>`)
                .append(amountContainer)
                .append(balanceContainer);
            
            let deletedSpan = $(`<span class="text-danger"></span>`).text('(DELETED)');
            let txTextContainer = $(`<div class="p-2"></div>`).text(transaction.originalText);
            // Not sure why, but sometimes js think it's a string and not a boolean
            if(transaction.isDeleted === true || transaction.isDeleted === 'true') {
                txTextContainer.prepend(deletedSpan);
            }
            let dateContainer = $(`<div class="p-2"></div>`).text(new Date(transaction.date).toISOString());
            let textAndDateContainer = $(`<div class="flex-column flex-fill"></div>`).append(txTextContainer).append(dateContainer);
            
            let rowTextAndAmountContainer = $(`<div class="d-flex justify-content-between"/>`)
                .append(textAndDateContainer)
                .append(amountAndBalanceContainer);
            
            let collapsibleContainer = $(`<div class="collapse" style="margin-right: 1rem;" id="collapse-${transaction.id}"></div>"`)
                .append(createDynamicTable(transaction));
            
            let transactionContainer = $(`<div class="account-container "
                   onclick="$('#collapse-${transaction.id}').collapse('toggle');">`)
                   .append(rowTextAndAmountContainer)
                   .append(collapsibleContainer);
            
            $('#transaction-container').append(transactionContainer);
        }
        
        function createDynamicTable(json) {
            json = flatten(json);
            let table = $(`<table style="width:100%" />`).addClass('table');
            $.each(json, function(key, data) {
                let row = $("<tr/>")
                    .append($(`<td style="width:30%"/>`).text(key))
                    .append($(`<td style="width:70%;max-width: 0; overflow:hidden;text-overflow: ellipsis; white-space: nowrap;"/>`).text(data === null || data === undefined ? 'null' : data));
                
                table.append(row);
            });
            return table;
        }
        
        function loadMore() {
            $.ajax({
                url: `/viia/accounts/@(Model.Transactions == null || Model.Transactions.Count == 0 ? "" : Model.Transactions[0].AccountId)/transactions/query`,
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(generateTransactionQueryRequestBody()),
                success: function(data) {
                    if(data.pagingToken === null || data.pagingToken === undefined || data.pagingToken === '') {
                        $('#load-more-btn').hide();
                    } else {
                        $('#load-more-btn').show();
                    }
                    $('#pagingTokenInput').val(data.pagingToken);
                    renderTransactions(data.transactions);
                    if(data.transactions.length === 0) {
                        alert('No transactions found with specified filters');
                    }
                },
                error: function() {
                    alert('Failed to load more transactions, check your filters');
                }
            });
        }
        
        function generateTransactionQueryRequestBody() {
            let result = {
                pagingToken: $('#pagingTokenInput').val(),
                includeDeleted: $('#includeDeletedInput').val() === '1',
                filters: []
            };
            let transactionFilters = $('.transaction-filter');
            if(transactionFilters.length) {
                transactionFilters.each(function(index, element) {
                    let propertyValue = $(element).find('.filter-select').val();
                    let filterValue = $(element).find('.filter-value').val();
                    let operatorValue = $(element).find('.operator-select').val();
                    result.filters.push({property: propertyValue, value: filterValue, operator: operatorValue}); 
                });
            }
            let amountFilter = $('.amount-filter');
            if(amountFilter.length) {
                let minValue = amountFilter.find('.min-amount-value').val();
                let maxValue = amountFilter.find('.max-amount-value').val();
                result.amountValueBetween = {
                    min: minValue,
                    max: maxValue
                };
            }
            
            let balanceFilter = $('.balance-filter');
            if(balanceFilter.length) {
                console.table(balanceFilter);
                let minValue = balanceFilter.find('.min-balance-value').val();
                let maxValue = balanceFilter.find('.max-balance-value').val();
                console.log(minValue);
                console.log(maxValue);
                result.balanceValueBetween = {
                    min: minValue,
                    max: maxValue
                };
            }
            return result;
        }
        
        function toggleIncludeDeleted() {
            let newValue = $('#include-deleted').is(':checked');
            
            $('#includeDeletedInput').val(newValue ? '1' : '0');
            reloadTransactions()
        }
        
        function reloadTransactions() {
            $('#transaction-container').empty();
            $('#pagingTokenInput').val('');
            loadMore();
        }
        
        function addFilter() {
            $("#apply-filters-btn").attr("disabled", false);
            let propertySelect = $(`
                <div class="input-group" style="width:auto;">
                    <div class="input-group-prepend">
                        <label class="input-group-text">Property</label>
                    </div>
                    <select class="custom-select filter-select">
                        <option value="originalText">Original Text</option>
                        <option value="text">Text</option>
                        <option value="state">State</option>
                        <option value="type">Type</option>
                        <option value="date">Date</option>
                    </select>
                </div>`);
            
            let valueInput = $(`
                <div class="input-group" style="width:auto;">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="custom-locale">Value</label>
                    </div>
                    <input type="text" class="filter-value pl-1">
                </div>`);
            
            let operatorSelect = $(`
                <div class="input-group" style="width:auto;">
                    <div class="input-group-prepend">
                        <label class="input-group-text">Operator</label>
                    </div>
                    <select class="custom-select operator-select">
                        <option value="AND">AND</option>
                        <option value="OR">OR</option>
                    </select>
                </div>`)
            
            let filter = $(`<div class="row d-flex my-2 justify-content-between transaction-filter"></div>`)
                .append(propertySelect)
                .append($(`<span>Contains</span>`))
                .append(valueInput)
                .append(operatorSelect);
                
            $(`#filter-container`)
                .append(filter);
        }
        
        function addNumberBetweenFilter(propertyName) {
            if($(`.${propertyName}-filter`).length) {
                alert(`Already contains a ${propertyName} filter.`);
                return;
            }
            $("#apply-filters-btn").attr("disabled", false);
            
            let propertyNameLabel = $(`
                            <div class="input-group" style="width:auto;">
                                <div class="input-group-prepend">
                                    <label class="input-group-text">Property</label>
                                </div>
                                <input type="text" class="${propertyName}-label pl-1" value="${propertyName}" readonly>
                            </div>`);
            
            let minInput = $(`
                            <div class="input-group" style="width:auto;">
                                <div class="input-group-prepend">
                                    <label class="input-group-text">Min</label>
                                </div>
                                <input type="number" class="min-${propertyName}-value pl-1" value="0">
                            </div>`);
            let maxInput = $(`
                            <div class="input-group" style="width:auto;">
                                <div class="input-group-prepend">
                                    <label class="input-group-text">Max</label>
                                </div>
                                <input type="number" class="max-${propertyName}-value pl-1" value="0">
                            </div>`);
            
            let betweenFilter = $(`<div class="row d-flex my-2 justify-content-between ${propertyName}-filter"></div>`)
                .append(propertyNameLabel)
                .append(minInput)
                .append(maxInput);
            $(`#filter-container`)
                .append(betweenFilter);
            
        }
        
        function applyFilters() {
            $('#load-more-btn').hide();
            reloadTransactions()
        }
        
        function clearFilters() {
            $("#apply-filters-btn").attr("disabled", false);
            $(`.transaction-filter`).remove();
            reloadTransactions();
        }
        
        function flatten(data) { 
            let result = {};
            function recurse (cur, prop) {
                if (Object(cur) !== cur) {
                    result[prop] = cur;
                } else if (Array.isArray(cur)) {
                     for(var i=0, l=cur.length; i<l; i++)
                         recurse(cur[i], prop + "[" + i + "]");
                    if (l === 0)
                        result[prop] = [];
                } else {
                    let isEmpty = true;
                    for (let p in cur) {
                        isEmpty = false;
                        recurse(cur[p], prop ? prop+"."+p : p);
                    }
                    if (isEmpty && prop)
                        result[prop] = {};
                }
            }
            recurse(data, "");
            return result;
        }
    </script>
}