@using Newtonsoft.Json
@model AccountsViewModel

@{
    ViewBag.Title = "Accounts";
    Layout = "_Layout";
}

@Html.Hidden("EmailEnabled", Model.EmailEnabled)


<h1 class="text-center">

    Accounts
</h1>
<p class="text-center">

    Use Aiia to connect to various finance related services such as banks, travel cards, and pension accounts.
</p>

<section class="jumbotron text-center">
    <div class="row justify-content-md-center">

        <ul class="nav nav-pills mb-4">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle"
                   data-toggle="dropdown"
                   href="#"
                   role="button"
                   aria-haspopup="true"
                   aria-expanded="false">
                    Connect Accounts
                </a>
                <div class="dropdown-menu">
                    <a class="dropdown-item"
                       style="cursor: pointer;"
                       onclick="window.location.href = getConnectUrl(false)">
                        Redirect
                    </a>
                    <a class="dropdown-item"
                       style="cursor: pointer;"
                       onclick="window.location.href = getConnectUrl(true)">
                        One-Time
                    </a>
                </div>
            </li>

            @if (Model?.AccountsGroupedByProvider != null && Model.AccountsGroupedByProvider.Any())
            {
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle"
                       data-toggle="dropdown"
                       href="#" role="button"
                       aria-haspopup="true"
                       aria-expanded="false">
                        Update Accounts
                    </a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item"
                           style="cursor: pointer;"
                           onclick="requestDataUpdateRedirect()">
                            Redirect
                        </a>
                    </div>
                </li>
            }
            <li class="nav-item">
                <a class="nav-link"
                   role="button"
                   href="#"
                   id="email-button"
                   style="cursor: pointer;"
                   onclick="toggleEmail()">
                    @(Model.EmailEnabled ? "Disable email notifications" : "Enable email notifications")
                </a>
            </li>
            @if (Model?.JwtToken != null)
            {
                <li class="nav-item">
                    <a class="nav-link"
                       href="#"
                       style="cursor: pointer;"
                       onclick="toggleModal('dataModal')">
                        Toggle JWT token payload
                    </a>
                </li>
            }

        </ul>
    </div>
    <div class="row justify-content-md-center">
        <div class="input-group mb-3 mt-4">
            <div class="input-group-prepend">
                <label class="input-group-text" >(Optional) Scopes</label>
            </div>
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-scope-offlineAccess">offline_access</label>
            </div>
            <input type="checkbox" class="custom-checkbox" id="custom-scope-offlineAccess" />
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-scope-accounts">accounts</label>
            </div>
            <input type="checkbox" class="custom-checkbox" id="custom-scope-accounts" />
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-scope-paymentsInbound">payments:inbound</label>
            </div>
            <input type="checkbox" class="custom-checkbox" id="custom-scope-paymentsInbound" />
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-scope-paymentsOutbound">payments:outbound</label>
            </div>
            <input type="checkbox" class="custom-checkbox" id="custom-scope-paymentsOutbound" />
        </div>
        @if (Model.Providers != null && Model.Providers.Any())
        {
            <div class="input-group mb-3 mt-4">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="bank-provider">(Optional) Pre-selected bank provider</label>
                </div>
                <select class="custom-select" id="bank-provider">
                    <option value="">-</option>
                    @foreach (var provider in Model.Providers)
                    {
                        <option value="@provider.Id">[@provider.CountryCode] @(provider.Name ?? provider.Id)</option>
                    }
                </select>
            </div>
        }

        <div class="input-group mb-3 mt-4">
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-locale">(Optional) Pre-selected bank accounts</label>
            </div>
            <input class="form-control" id="bank-account-ids" type="text" placeholder="Comma separated BBAN or IBAN accounts. Requires Pre-selected bank provider."/>
        </div>

        <div class="input-group mb-3 mt-4">
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-locale">(Optional) Locale</label>
            </div>
            <select class="custom-select" id="custom-locale">
                <option value="">-</option>
                <option value="en">en</option>
                <option value="da">da</option>
                <option value="fi">fi</option>
                <option value="sv">sv</option>
            </select>
        </div>

        <div class="input-group mb-3 mt-4">
            <div class="input-group-prepend">
                <label class="input-group-text" for="custom-selectAllAccounts">(Optional) Select All Accounts</label>
            </div>
            <input type="checkbox" class="custom-checkbox" id="custom-selectAllAccounts"/>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.ConsentId))
        {
            <div class="input-group mb-3 mt-4">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="custom-useConsentId">(Optional) Send ConsentId</label>
                </div>
                <input type="checkbox" class="custom-checkbox" id="custom-useConsentId"/>
            </div>
        }
        @if (!string.IsNullOrWhiteSpace(Model.Email))
        {
            <div class="input-group mb-3 mt-4">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="custom-useEmail">(Optional) Send Email</label>
                </div>
                <input type="checkbox" class="custom-checkbox" id="custom-useEmail"/>
            </div>
        }
    </div>
</section>
<div class="row">

    <div class="col">
        @if (Model?.AccountsGroupedByProvider == null || !Model.AccountsGroupedByProvider.Any())
        {
            <p class="text-center">
                There are no accounts connected. Connect to accounts with one of the flows above.
            </p>
        }
        else
        {
            foreach (var group in Model.AccountsGroupedByProvider)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        Provider: @group.Key
                    </div>
                    <div class="card-body">
                        @foreach (var account in Model.AccountsGroupedByProvider[group.Key])
                        {
                            <div class="media bg-light mb-2 w-100"
                                 onclick="window.location.href = '@Url.Action("Transactions", "Account", new {accountId = account.Id})'">

                                <div class="media-body ml-3" style="cursor: pointer">
                                    <p class="mt-3">@account.Name</p>

                                    @if (account.Number?.Bban != null || account.Number?.Iban != null)
                                    {
                                        <p> @(account.Number.Bban ?? account.Number.Iban) </p>
                                        <p>
                                            <small>Last updated @(account.LastSynchronized)</small>
                                        </p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (Model.AllAccountsSelected != null)
            {
                <hr>
                <p>All accounts were selected - @Html.Raw(Model.AllAccountsSelected)</p>
            }
        }
    </div>
</div>


<div class="modal fade"
     id="dataModal"
     tabindex="-1"
     role="dialog"
     aria-labelledby="dataModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content"
             style="padding: 2rem;">
            <div style="position: relative">
                <h5>Jwt access token payload</h5>
                <pre>@PrettifyJwtPayloadJson(Model?.JwtToken?.ToString())</pre>
                <h5>Refresh token payload</h5>
                <pre>@PrettifyJwtPayloadJson(Model?.RefreshToken?.ToString())</pre>
                <pre></pre>
            </div>
            <button class="btn btn-block btn-outline-danger"
                    onclick="toggleModal('dataModal')">
                Close
            </button>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@functions
{
    string PrettifyJwtPayloadJson(string payload)
    {
        if (payload == null)
        {
            return string.Empty;
        }
    // JwtSecurityToken.ToString() returns "{algorithm json}.{payload Json}"
        var algorithmJson = payload.Split(".")[0];
        var payloadJson = payload.Split(".")[1];

        dynamic parsedAlgJson = JsonConvert.DeserializeObject(algorithmJson);
        dynamic parsedPayloadJson = JsonConvert.DeserializeObject(payloadJson);

        dynamic niceJsonObj = new
                              {
                                  algorithm = parsedAlgJson,
                                  payload = parsedPayloadJson
                              };

        return JsonConvert.SerializeObject(niceJsonObj, Formatting.Indented);
    }
}

@section Scripts
{
    <script>
        function getConnectUrl(oneTime) {
            const baseConnectUrl = oneTime === true ? '@Model.ViiaOneTimeConnectUrl' : '@Model.ViiaConnectUrl';

            let url = decodeURI(baseConnectUrl);
            url = addQueryParamToUrl(url, 'culture', $("#custom-locale").val());
            url = addQueryParamToUrl(url, 'providerId', $('#bank-provider').val());
            url = addQueryParamToUrl(url, 'bank_account_numbers', $('#bank-account-ids').val());
            
            if ($('#custom-selectAllAccounts').is(':checked')) {
                url = addQueryParamToUrl(url, 'select_all_accounts', 'true');
            }
            if ($('#custom-useConsentId').is(':checked') && oneTime === false) {
                url = addQueryParamToUrl(url, 'consentId', '@Html.Raw(Model.ConsentId)');
            } else if ($('#custom-useEmail').is(':checked') && oneTime === false) {
                url = addQueryParamToUrl(url, 'email', '@Html.Raw(Model.Email)');
            }
            var scopes = [];
            if ($('#custom-scope-offlineAccess').is(':checked')) {
                scopes.push('offline_access');
            }
            if ($('#custom-scope-accounts').is(':checked')) {
                scopes.push('accounts');
            }
            if ($('#custom-scope-paymentsInbound').is(':checked')) {
                scopes.push('payments:inbound');
            }
            if ($('#custom-scope-paymentsOutbound').is(':checked')) {
                scopes.push('payments:outbound');
            }
            url = addQueryParamToUrl(url, 'scope', scopes.join(' '));
            url = url.replace(/amp;/g, '');
            return url;
        }

        function addQueryParamToUrl(url, name, value) {
            if (typeof(url) !== 'string' || !url instanceof String) {
                return url;
            }

            if (typeof(name) !== 'string' || !name instanceof String) {
                return url;
            }

            if (value === '') {
                return url;
            }

            if (value.trim().length > 0) {
                url += "&" + name + "=" + encodeURIComponent(value);
            }

            return url;
        }

        function updateEmailTexts() {
            const emailEnabled = $("#EmailEnabled").val() === 'true';
            const buttonText = emailEnabled ? "Disable Email Notifications" : "Enable Email Notifications";
            $("#email-button").text(buttonText);
        }

        function toggleModal(id) {
            $("#" + id).modal('toggle');
        }

        function bindEvent(element, eventName, eventHandler) {
            if (element.addEventListener) {
                element.addEventListener(eventName, eventHandler, false);
            } else if (element.attachEvent) {
                element.attachEvent("on" + eventName, eventHandler);
            }
        }

        $(document).ready(function() {
            bindEvent(window,
                'message',
                function(e) {
                    if (e.data === 'viia-login-done') {
                        $('#viiaModal').modal('hide');
                        window.location.href = '/viia/accounts/';
                    }
                });
        });

        function requestDataUpdateRedirect() {
            $.ajax({
                url: '/viia/update',
                type: 'POST',
                dataType: "json",
                success: function(data) {
                    if (data.authUrl) {
                        // Auth url not empty or null means we need a supervised login
                        window.location.href = addQueryParamToUrl(data.authUrl, 'culture', $("#custom-locale").val());
                    } else {
                        alert("All accounts didn't require user-assisted authentication and were queued up for sync");
                        // refresh page?
                    }
                }
            });
        }

        function toggleEmail() {
            $.ajax({
                url: '/viia/toggle-email',
                type: 'POST',
                dataType: "json",
                success: function(data) {
                    $("#EmailEnabled").val(data.updatedStatus);
                    updateEmailTexts();
                }
            });
        }
    </script>
}